model VoyageBasedModel
uses  "mmxprs", "mmsystem", "mmive"; ! Use Xpress-Optimizer


!======================================= PARAMETERS ============================================================

parameters
	 ! Input file is specified here
	 
	 DataFilePath = '..\data\input\april 2016\fixed fleet\with slack\'
	 InputDate = '2016-05-29'
	 ProblemInstance = '11-0-36'
	 DataFile = DataFilePath + InputDate + " " + ProblemInstance + '.txt'
	 
	
	 OutputFilePath = '..\data\output\'
	 
	 ! Change this to decide if fleet is fixed or not
	 FixFleet = true
	 UseEpsilonConstraintMethod = true
	 ! Input file containing baseline solution to compare new solution with
	 BaselineFilePath = '..\data\input\april 2016\baseline\'
	 BaselineFile = BaselineFilePath + '14-0-48.txt'
	 TestCase = 'Cost+Persistence+Robustness_Shutdown3Inst_EXACT'
	 nNBaseline = 14
	 
	 
	 ! Solver will stop and accept current best solution when optimality gap is lower than the limit
	 OptimalityGapLimit = 0
	 Timeout = 3600
	 

end-parameters

!======================================= PARAMETERS-END =========================================================


writeln("DataFile = " + DataFile);
writeln("UseEpsilon = " + UseEpsilonConstraintMethod);

!Modify Optimizer control parameter MIPRELSTOP
setparam("XPRS_MIPRELSTOP", OptimalityGapLimit);
setparam("XPRS_MAXTIME", Timeout);
setparam("XPRS_CPUTIME", 0); ! 0 - Reports actual time, 1 - Reports CPU time


!======================================= SETS, INDICES AND CONSTANTS =========================================================

declarations
	! Sizes/bounds of sets
	nV: integer; ! No of vessels
	nR: integer; ! No of voyages
	nN: integer; ! No of installations
	minF: integer; ! Minimum number of required visits
	maxF: integer; ! Maximum number of required visits
	nT: integer; ! No of days in planning period
	minL: integer; ! Minimum voyage duration
	maxL: integer; ! Maximum voyage duration
	
	OutputFile: string;
	DateTime: datetime;
end-declarations

initializations from DataFile
	nV;
	nR;
	nN;
	minF;
	maxF;
	nT;
	minL;
	maxL;
end-initializations

V := 1 .. nV;
N := 1 .. nN;
F := minF .. maxF;
T := 0 .. nT-1; ! Zero-indexed due to use of modulus operator in spread of departures constraints
L := minL .. maxL;
R := 1 .. nR;

minS := 0;
maxS := 23;
S := minS..maxS; ! Possible hours of slack


NBaseline := 1 .. nNBaseline;

ParetoIndex := {'1 RobEpsilon(L)', '2 ChangeEpsilon(U)', '3 Robustness', '4 TotalChange', '5 TotalCost'}; ! For indexing ParetoFront

MaxParetoSolutions := (nT*nN+1)*(nV*floor(nT/minL));
! Max number of values for change is nT*nN+1 [Days times installations + 1 for the case with 0 changes]
! Max number of voyages is nV * (nT/minL) [maxNumber of voyages per PSV times number of PSVs]


declarations
	! Sets
	Rv: array(V) of set of integer; ! Voyages a vessel can sail
	Rvi: array(V, N) of set of integer; ! Voyages a vessel can sail that visit installation i
	Rvl: array(V, L) of set of integer; ! Voyages a vessel can sail that has duration l
	Rvls: array(V, L, S) of set of integer; ! Voyages a vessel can sail that has duration l and slack s
	Nf: array(F) of set of integer; ! Sets of installations requiring f visits
	
	OptimalFleet: array(V) of integer; ! 0 - not chartered, 1 - chartered
	
	! Parameters
	TimeCharterCost: array(V) of real; ! C^(TC)
	VoyageCost: array(R) of real; ! C^S, includes sailing and service costs
	VoyageDuration: array(R) of integer; ! D_r, duration of voyage
	RequiredVisits: array(N) of integer; ! S_i
	NumberOfDaysAvailable: array(V) of integer; ! F_v, number of days vessel v may be used during the planning period
 	DepotCapacity: array(T) of integer; ! B_t, max number of vessels that can be serviced at depot each day
			
	hf: array(1..7) of integer;
	Pf_min: array(1..7) of integer;
	Pf_max: array(1..7) of integer;
	
	! Variables
	delta: dynamic array(V) of mpvar; ! 1 if vessel v is chartered, 0 otherwise
	x: dynamic array(V, R, T) of mpvar; ! 1 if vessel v sails route r starting on day t
	
	! Output helper
	DayNames: array(T) of string;
	
	
	
	!----------------------------------------- EPSILON-CONSTRAINT VARIABLES -----------------------------------------------
	
	! Epsilon-constraint: Baseline solution values
	BaselineSigma: array(NBaseline, T) of integer; ! Sigma-values in baseline solutione
	
	! Epsilon-constraint: Variables
	sigma: array(N, T) of mpvar; ! 1 if there is a departure to installation i on day t, 0 otherwise				
	gamma: array(N, T) of mpvar; ! 1 if there is a change in the departures to installation i on day t, 0 otherwise
	
	! Epsilon-constraint: Used for storing ParetoFront
	ParetoFront: array(1..MaxParetoSolutions, ParetoIndex) of real;
	
end-declarations

! Parameters used for spreading departures
hf ::	  [6, 2, 2, 3, 1, 0, 0] ! Horizon in which we need to constrain number of departures, given f required visits
Pf_min :: [0, 0, 1, 2, 1, 0, 0] ! Minimum no of departures to an installation in the horizon hf
Pf_max :: [1, 1, 3, 4, 2, 1, 1] ! Maximum no of departures to an installation in the horizon hf

! DayNames is used to make output more readable
DayNames :: ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun']

initializations from DataFile
	! Sets
	Rv;
	Rvi;
	Rvl;
	Rvls;
	Nf;
	
	!Parameters
	TimeCharterCost;
	VoyageCost;
	VoyageDuration;
	RequiredVisits;
	NumberOfDaysAvailable;
 	DepotCapacity;
end-initializations


if (FixFleet) then
	initializations from DataFile
		OptimalFleet;
	end-initializations
end-if


nVisitsTotal := sum(ii in N) RequiredVisits(ii);



!======================================= SETS, INDICES AND CONSTANTS - END =========================================================


!======================================= VARIABLES =========================================================


	
!Declaring constraints to fix fleet
declarations
	FixFleetCon: dynamic array(V) of linctr;
end-declarations

!Creating variables
forall(vv in V) do
	
	create(delta(vv));
	
	if (FixFleet) then
		FixFleetCon(vv) := delta(vv) = OptimalFleet(vv);
	else 	
		delta(vv) is_binary;
	end-if
	
	
	! Sets directive on variable
	! setmipdir(delta(vv), XPRS_PR, 1);
	! setmipdir(delta(vv), XPRS_DN);
	! setmipdir(delta(vv), XPRS_UP);
	
	forall(rv in Rv(vv), tt in T) do
		create(x(vv,rv,tt));
		x(vv,rv,tt) is_binary;
	end-do
	
end-do


!======================================= VARIABLES-END =========================================================


!======================================= CONSTRAINTS ===========================================================

! Declaring constraints and objective function
declarations
	TotalCost: linctr ! (4.1)
	VisitsCon: dynamic array(N) of linctr; ! (4.2) All installations must be visited the required times
	AvailableDaysCon: dynamic array(V) of linctr; ! (4.3) Each vessel does not sail more days than allowed
	DepotCapacityCon: dynamic array(T) of linctr; ! (4.4)
	ReturnBeforeNewVoyageCon: dynamic array(V, T, L) of linctr; ! (4.5) Vessel does not begin a new voyage before it has returned from its last voyage
	SpreadDeparturesMinCon: dynamic array(N, F, T) of linctr; ! (4.6) - Lower bound
	SpreadDeparturesMaxCon: dynamic array(N, F, T) of linctr; ! (4.6) - Upper bound
	OneDeparturePerDayCon: dynamic array(N, T) of linctr; ! (4.6) - Maximum one departure to an installation per day
	
	nVoyagesUsed: linctr; ! Number of voyages sailed in solution
				
	!----------------------------------------- PERSISTENCE CONSTRAINTS -----------------------------------------------
	
	XToSigmaCon: array(N, T) of linctr; ! Constraint linking x-variables with sigma
	! Constraints linking gamma and sigma
	SigmaToGammaCon1: array(N, T) of linctr; 
	SigmaToGammaCon2: array(N, T) of linctr;
	
	Change: linctr; ! Sum of all gamma variables
	EpsilonChangeCon: linctr; ! Constrains change
	
	!----------------------------------------- ROBUSTNESS CONSTRAINTS -----------------------------------------------
	
	SlackThreshold: array(L) of integer; ! Minimum slack for a voyage to count as robust
	nRobustVoyages: linctr; ! Number of voyages with more hours of slack than the SlackThreshold
	EpsilonRobustnessCon: linctr; ! Constrains robustness
	
end-declarations

! (4.2)
forall(ii in N) do
	VisitsCon(ii) := sum(vv in V, rr in Rvi(vv,ii), tt in T) x(vv,rr,tt) >= RequiredVisits(ii);
end-do

! (4.3)
forall(vv in V) do
	AvailableDaysCon(vv) := sum(ll in L, rr in Rvl(vv, ll), tt in T) (x(vv,rr,tt) * ll) <= NumberOfDaysAvailable(vv) * delta(vv);
end-do

! (4.4)
forall(tt in T) do
	DepotCapacityCon(tt) := sum(vv in V, rr in Rv(vv)) x(vv,rr,tt) <= DepotCapacity(tt);
end-do

! (4.5)
forall(vv in V, tt in T, ll in L) do
	ReturnBeforeNewVoyageCon(vv, tt, ll) := sum(rr in Rvl(vv,ll)) (x(vv,rr,tt)) + sum(rr in Rv(vv), ti in 1..(ll-1)) x(vv, rr, (tt+ti)mod nT)<= delta(vv);
end-do

! (4.6)
forall(ff in F, ii in Nf(ff), tt in T) do
	SpreadDeparturesMinCon(ii, ff, tt) := Pf_min(ff) <= sum(vv in V, rr in Rvi(vv,ii), hh in 0..hf(ff)) x(vv, rr, ((tt+hh)mod nT));
	SpreadDeparturesMaxCon(ii, ff, tt) := Pf_max(ff) >= sum(vv in V, rr in Rvi(vv,ii), hh in 0..hf(ff)) x(vv, rr, ((tt+hh)mod nT));
end-do

forall(ii in N, tt in T) do
	OneDeparturePerDayCon(ii, tt) := sum(vv in V, rr in Rvi(vv, ii)) x(vv, rr, tt) <= 1;
end-do


nVoyagesUsed := sum(vv in V, rr in Rv(vv), tt in T) x(vv, rr, tt);

	
!======================================= CONSTRAINTS-END =========================================================

forward procedure CreateOutputFile
forward procedure WriteProblemInfo
forward procedure WriteSolution
forward procedure WriteVesselsUsed
forward procedure WriteVoyagesUsed
forward procedure WriteDepartures
forward procedure WriteBaselineSigma
forward procedure WriteBaselineDepartures
forward procedure WriteGamma
forward procedure WriteParetoFront
forward procedure WriteElapsedTime
forward procedure WriteIterationResults
forward procedure WriteIterationEpsilons
forward procedure SaveParetoSolution(IsFeasibleSolution : boolean)


StartTime := time(SYS_NOW);







! =========================== SOLVING SINGLE-OBJECTIVE PROBLEM ==============================================================================

if (not UseEpsilonConstraintMethod) then

	
	writeln("Running single optimization...");
	

	! =========================================================Objective function=====================================================================
	
	if (FixFleet) then ! Only look at sailing cost
		TotalCost := sum(vv in V, rr in Rv(vv), tt in T) x(vv, rr, tt) * VoyageCost(rr);
	else		! Include charter cost
		TotalCost := sum(vv in V)TimeCharterCost(vv) * delta(vv) + sum(vv in V, rr in Rv(vv), tt in T) x(vv, rr, tt) * VoyageCost(rr);
	end-if
	
	minimize(TotalCost);
	
	CreateOutputFile;

	fopen(OutputFile, F_OUTPUT);	
		WriteProblemInfo;
		
		if (getprobstat = XPRS_INF) then
			writeln("\nNo feasible solution found");
		else
			WriteSolution;
			WriteVesselsUsed;
			WriteVoyagesUsed;
			WriteDepartures;
			WriteBaselineSigma;					
		end-if
		
		WriteElapsedTime;
		
	fclose(F_OUTPUT);
	writeln("Model finished running");

! =========================== SOLVING SINGLE-OBJECTIVE PROBLEM-END ===================================================================================
	
! ====================================================================================================================================================
	
! ======================================= SOLVING MULTI-OBJECTIVE PROBLEM ============================================================================

else
	
	writeln("Creating Pareto-front using epsilon-constraint method");
	
	
	!--------------------- VARIABLES -------------------------------------------
	
	initializations from BaselineFile
		BaselineSigma;
	end-initializations
	
	forall(ii in N, tt in T | ii <= nNBaseline) do
		create(sigma(ii, tt));
		create(gamma(ii, tt));
		sigma(ii, tt) is_binary;
		gamma(ii, tt) is_binary;
	end-do
	
	
	!--------------------- CONSTRAINTS ---------------------------------------------------
	
	forall(ii in N, tt in T | ii <= nNBaseline) do
		XToSigmaCon(ii, tt) := sigma(ii, tt) = sum(vv in V, rr in Rvi(vv, ii)) x(vv, rr, tt);
		SigmaToGammaCon1(ii, tt) := gamma(ii, tt) >= sigma(ii, tt)-BaselineSigma(ii, tt);
		SigmaToGammaCon2(ii, tt) := gamma(ii, tt) >= BaselineSigma(ii, tt) - sigma(ii, tt);
	end-do
	
	
	!----------------------- PERSISTENCE -------------------------------------------------
	Change := sum(ii in N, tt in T | ii <= nNBaseline) gamma(ii, tt);
	
	!----------------------- ROBUSTNESS -------------------------------------------------
	
	SlackThreshold :: [4, 4, 6];
	
	! NUMBER OF VOYAGES USED THAT HAVE AT LEAST THE REQUIRED SLACK
	nRobustVoyages := sum(vv in V, ll in L, ss in SlackThreshold(ll)..maxS, rr in Rvls(vv,ll,ss), tt in T) x(vv,rr,tt);
	
	
	!--------------------- OBJECTIVE FUNCTION ------------------------------------------------------------------------------------------------
	
	if (FixFleet) then ! Only look at sailing cost
		TotalCost := sum(vv in V, rr in Rv(vv), tt in T) x(vv, rr, tt) * VoyageCost(rr) + Change;
	else		! Include charter cost
		TotalCost := sum(vv in V)TimeCharterCost(vv) * delta(vv) + sum(vv in V, rr in Rv(vv), tt in T) x(vv, rr, tt) * VoyageCost(rr) + Change;
	end-if
	! Add a small cost on change, in order to find the minimum change solution if there are multiple solution with equal cost
		
		
		
	!--------------------- OUTPUT ------------------------------------------------------
		
	CreateOutputFile;
	fopen(OutputFile, F_OUTPUT + F_APPEND);	
	writeln("Epsilon-constraint method");
	writeln("Baseline file: " + BaselineFile + "\n");
	
	WriteProblemInfo;
	
	
	
	!--------------------- EPSILON-METHOD ----------------------------------------------	
	
	(!
	if FixFleet then
		numberOfPSVs := 0
		forall(vv in V) do
			if OptimalFleet(vv) = 1 then
				numberOfPSVs := numberOfPSVs + 1
			end-if
		end-do
	else
		numberOfPSVs := nV
	end-if
	
	!MaxNVoyages := numberOfPSVs*floor(nT/minL); ! Equals maximum number of voyages used. Sets maximum number of possible robustness values
	!RobustnessStep := 1/MaxNVoyages;
	!)
	
	iteration := 0;
	AllParetoSolutionsFound := false;
	
	
	RobustnessEpsilon := 0.0;
	
	while (RobustnessEpsilon <= 1.0) do
	! Outer loop goes through all possible levels of robustness
		ChangeEpsilon := nT * nN;
		
		EpsilonRobustnessCon := nRobustVoyages >= RobustnessEpsilon * nVoyagesUsed;
		
		while(ChangeEpsilon >= 0) do
			! Inner loop goes through all possible levels of change
			iteration := iteration + 1;
			
			WriteIterationEpsilons
			
			EpsilonChangeCon := Change <= ChangeEpsilon;
			
			minimize(TotalCost);
	
			if (getprobstat = XPRS_INF) then
					
					SaveParetoSolution(false);
					
					writeln("\nNo feasible solution found");
					
					if (ChangeEpsilon = nT * nN) then
						AllParetoSolutionsFound := true;
					end-if
					
					
					break;
			end-if
			
			UncastedSolutionChange := sum(ii in N, tt in T | ii <= nNBaseline) getsol(gamma(ii, tt));
			SolutionChange := integer(round(UncastedSolutionChange));
			
			SolutionRobustness := getsol(nRobustVoyages)/getsol(nVoyagesUsed);
			
			SaveParetoSolution(true)
			WriteIterationResults
			WriteVoyagesUsed
			
			NextRobustness := SolutionRobustness + 0.01;
			
			if (SolutionChange = 0) then
				break;
			end-if
			
			ChangeEpsilon := SolutionChange - 1;
		
		end-do ! ChangeEpsilon-loop
		
		if (AllParetoSolutionsFound) then
			break;
		end-if
		
		RobustnessEpsilon := NextRobustness;
		
	end-do ! RobustnessEpsilon-loop
	
	!--------------------- EPSILON-METHOD END --------------------------------------------------	
	
	!--------------------- OUTPUT --------------------------------------------------------------
		
	WriteElapsedTime;
	WriteParetoFront;
	
	fclose(F_OUTPUT);
	writeln("Model finished running");
end-if
	
!======================================= SOLVING MULTI-OBJECTIVE PROBLEM-END ==================================================================


!======================================= PROCEDURES FOR PRINTING ==============================================================================

procedure WriteIterationEpsilons
	writeln("\n!==============================================================================================");
	writeln("Iteration " + iteration + ":\n");
	writeln("RobEpsilon: " + strfmt(RobustnessEpsilon, 0, 2));
	writeln("ChangeEpsilon: " + ChangeEpsilon);
end-procedure



procedure SaveParetoSolution(IsFeasibleSolution:boolean)

	! ----------- SAVING TO MOSEL ARRAY -----------------------------
	
	ParetoFront(iteration, '1 RobEpsilon(L)') := RobustnessEpsilon;
	ParetoFront(iteration, '2 ChangeEpsilon(U)') := ChangeEpsilon;
	
	if (IsFeasibleSolution) then
		ParetoFront(iteration, '3 Robustness') := SolutionRobustness;
		ParetoFront(iteration, '4 TotalChange') := SolutionChange;
		ParetoFront(iteration, '5 TotalCost') := getobjval-SolutionChange;
	else
		ParetoFront(iteration, '3 Robustness') := 0;
		ParetoFront(iteration, '4 TotalChange') := 0;
		ParetoFront(iteration, '5 TotalCost') := 0;
	end-if
	
	
end-procedure

(!
procedure RemoveParetoClones
	! Removes solutions from the Pareto front that have equal objective values
	nParetoSolutions := ceil( getsize(ParetoFront)/5);
	
	forall(sol in 1.. round( nParetoSolutions)) do
		forall(index in ParetoIndex)do		
			1+2
		end-do
		writeln("");
	end-do
	
end-procedure

function boolean IsClone()
!)

procedure WriteIterationResults
	
	writeln("Robustness: " + strfmt(SolutionRobustness, 0, 2));
	writeln("Change: " + SolutionChange);
	writeln("Total cost: " + (getobjval-SolutionChange));
	writeln("\nNumber of robust voyages: " + getsol(nRobustVoyages));
	
	WriteSolution;
		
end-procedure


procedure CreateOutputFile
	setparam("datetimefmt", "%.y-%0m-%0d %0H.%0M");
	DateTime := datetime(SYS_NOW);
	if (not UseEpsilonConstraintMethod) then	
		OutputFile := OutputFilePath + string(DateTime) + ' ' + ProblemInstance;
		OutputFile := OutputFile + '.txt';
	else 
		OutputFile := OutputFilePath + 'epsilon\' + string(DateTime) + ' ' + ProblemInstance + '_' + TestCase +  '.txt';	
	end-if
	writeln("Writing output to " + OutputFile);
end-procedure

	
procedure WriteProblemInfo
	writeln("!Problem instance: " + ProblemInstance);
	writeln("!Total visits: " + nVisitsTotal);
	writeln("!Solved on: " + DateTime);
	writeln("\n!Fixed fleet: " + FixFleet);
end-procedure

procedure WriteSolution
	nVesselsUsed := sum(vv in V) getsol(delta(vv));
	
	
	writeln("\n!----------------------------------------------------------------------------");
	
	if (not UseEpsilonConstraintMethod) then
		SolTotalCost := getobjval;
	else
		SolTotalCost := getobjval-getsol(Change);
	end-if
	
	BestBound := getparam("XPRS_BESTBOUND");
	OptimalityGap := (getobjval - BestBound)/getobjval;
	
	writeln("!Total cost: " + SolTotalCost);
	writeln("!Optimality gap: " + OptimalityGap);
	
	writeln("!Charter cost:\t " + sum(vv in V) TimeCharterCost(vv)*getsol(delta(vv)));
	writeln("!Sailing cost:\t " + sum(vv in V, rr in Rv(vv), tt in T) VoyageCost(rr) * getsol(x(vv,rr,tt))); 
	writeln("!Number of vessels used:\t" + nVesselsUsed);
	writeln("!Number of voyages sailed: " + getsol(nVoyagesUsed));
end-procedure

procedure WriteVesselsUsed
	writeln("\n!----------------------------------------------------------------------------");	
	writeln("!Vessels used: \n");
	nVesselsUsed := 0;
	
	forall(vv in V) do
		writeln("!Vessel " + vv + ": " + getsol(delta(vv)) + ". Cost: " + TimeCharterCost(vv));
		if (getsol(delta(vv)) > 0.5) then
			nVesselsUsed := nVesselsUsed + 1;
		end-if	
	end-do	
end-procedure

procedure WriteVoyagesUsed
	writeln("\n!----------------------------------------------------------------------------");	
	writeln("!Voyages used: \n");
	
	forall(vv in V, rr in Rv(vv), tt in T) do
		if (getsol(x(vv,rr,tt)) > 0.5) then
			writeln("!Vessel " + vv + ", Voyage " + rr + ", " + DayNames(tt) + ". Cost: " + VoyageCost(rr) + ". Duration: " + VoyageDuration(rr));
			
			forall(ss in S, ll in L) do
				if rr in Rvls(vv, ll, ss) then
					writeln("!Slack: " + ss)
				end-if
			end-do
			
		end-if	
	end-do
end-procedure		

procedure WriteDepartures
	writeln("\n!----------------------------------------------------------------------------");
	writeln("!Departures to each installation:");
	
	write("\n!\t\t\t");
	forall(tt in T) do
		write(DayNames(tt) + "\t");
	end-do
	
	forall(ii in N) do
		write("\n!Installation " + ii + ":");
		
		forall(tt in T) do
			nDepartures := 0;
			
			forall(vv in V, rr in Rvi(vv, ii)| getsol(x(vv, rr,tt)) > 0.5) do
				nDepartures := nDepartures + 1;
			end-do
			write("\t  " + string(nDepartures));		
		end-do
	end-do
end-procedure
	
procedure WriteBaselineSigma
		write("\n\nBaselineSigma: [");
		forall(ii in N) do
			writeln("");
			forall(tt in T) do
				nDepartures := 0;
					
				forall(vv in V, rr in Rvi(vv, ii)| getsol(x(vv, rr,tt)) > 0.5) do
					nDepartures := nDepartures + 1;
				end-do
				write(string(nDepartures) + " ");
			end-do
		end-do
		writeln("\n]");
end-procedure

procedure WriteBaselineDepartures
	writeln("\n!----------------------------------------------------------------------------");
	writeln("!Baseline departures:");
	
	write("\n!\t\t\t");
	forall(tt in T) do
		write(DayNames(tt) + "\t");
	end-do
	
	forall(ii in N) do
		write("\n!Installation " + ii + ":");
		
		forall(tt in T) do
			write("\t  " + BaselineSigma(ii, tt));		
		end-do
	end-do
end-procedure
	

procedure WriteGamma
	writeln("\n!----------------------------------------------------------------------------");
	writeln("!Gamma:");
	
	write("\n!\t\t\t");
	forall(tt in T) do
		write(DayNames(tt) + "\t");
	end-do
	
	forall(ii in N) do
		write("\n!Installation " + ii + ":");
		
		forall(tt in T) do
			write("\t  " + getsol(gamma(ii, tt)));		
		end-do
	end-do
end-procedure

procedure WriteParetoFront
	
	nParetoSolutions := ceil( getsize(ParetoFront)/5);
	
	
	writeln("\n!==============================================================================================\n");
	writeln("!Number of Pareto-optimal solutions: " + nParetoSolutions);
	writeln("!Pareto Front:");
	
	forall(index in ParetoIndex) do
		write(index + "\t");
	end-do
	
	writeln("");
	
	forall(sol in 1.. round( nParetoSolutions)) do
		forall(index in ParetoIndex)do		
			if (index = "1 RobEpsilon(L)" or index = "3 Robustness") then
				write("\t" + strfmt(ParetoFront(sol, index), 0, 2) + "\t");
			else
				write("\t" + string(ParetoFront(sol, index)) + "\t");		
			end-if
			
		end-do
		writeln("");
	end-do
end-procedure


procedure WriteElapsedTime
	EndTime := time(SYS_NOW);
	writeln("\nTotal time elapsed: " + ((EndTime-StartTime)/1000));
end-procedure

!======================================= PROCEDURES FOR PRINTING-END ===========================================================================

end-model
